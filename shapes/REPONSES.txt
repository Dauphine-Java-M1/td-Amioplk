
Exercice 1 : 

	1. Cela fonctionne car la méthode main est dans la même classe que Point 
		et a donc accès aux attributs privés x et y de l'instance p de Point
		
	2. La classe TestPoint n'étant pas la classe Point (évidemment) ou même une classe interne ou même une classe qui hérite de Point ou même dans le même package,
		 elle n'a donc pas accès aux attributs privés de Point.
		 On peut y remédier avec un getter (ou accesseur en français).
		 
	3. A priori s'il n'y a pas de bonne raison pour rendre des champs visibles, il faut les mettre en privé.
	 	Cela permet de s'assurer que l'on contrôle les champs et qu'on restreind d'éventuelles modifications ou des actions qui ne sont pas en accord avec le comportement de notre classe.
	 	
	4. Un accesseur est une méthode publique associée a un champs privé d'une classe pour y accéder sous le contrôle du concepteur de cette classe.
		Oui c'est pertinent de créer des accesseurs ici.
		
	5. Notre projet ne compile plus car on fait appel au constructeur par défaut qui n'est plus disponible dès lors qu'on spécifie un constructeur avec des paramètres.
	
	6. Nous avons une collision/ un conflit de noms. Il nous faut spécifier le x qui est en argument et le x qui est attribut de l'instance actuelle avec le mot clé this.
	
	7. On peut créer un champs statique (commun à toutes les instances de la classe Point) qui serait incrémenté à chaque appel aux différents constructeurs.
	
	8. Le constructeur sait quel constructeur appeler car les constructeurs ont des paramètres différents.
	
Exercice 2 :

	1. Ce code affiche vrai puis faux car p2 fait référence au même objet que p1 alors que p3 fait référence à un autre objet.
		L'opérateur == ne connait pas notre classe Point et donc ne peut pas deviner la signification sémentique de notre Point.
		
	3. "index i such that (o==null ? get(i)==null : o.equals(get(i)))" donc il nous faut override la méthode equals.
	
Exercice 3 :

	2. La JVM va lever pendant l'exécution une exception d'indice hors des limites.
	
	5. La JVM l�ve une NullPointerException � l'ex�cution car on essaie d'ex�cuter null.equals(o);
	
	6. Point capacity ne sert plus � rien car on peut ajouter des points ind�finiement.
	
Exercice 4 : 

	1. On pourrait lui donner deux entiers ou un point existant en retrounant void et l'�quivalent en retournant un Point.
	
	2. c.center et c2.center font r�f�rence au m�me objet qui est mutable, il faut donc adopter un comportement immutable de copie des objets.
	
	3. Le comportement est illogique, il est permi � l'utilisateur de modifier le centre sans avoir acc�s � une m�thode setCenter();
	
	5. Il faut en faire une méthode statique car rien n'exploite les propriétés de l'objet appelant.
	
Exercice 5 :

	1. L'héritage ne parraît pas intéressant ici car l'anneau les attributs sont privés (et donc pas hérités) et de plus il faudrait réimplémenter toutes les méthodes définies pour Circle (ex : surface et contains)
	De plus, conceptuellement, un anneau n'est pas vraiment un cercle.
	De plus, si une fonctionnalité est ajoutée à un cercle, il faut avoir le soucis de vérifier ce que ça implique pour les anneaux.
	Un autre arguement serait que nous serions obligés de relaxer la visibilité des attributs.
	
	4. Etant donné que nous avons opté pour ne pas hériter de Circle, le syso va afficher une représentation de notre anneau qui lui est propre.
	
	