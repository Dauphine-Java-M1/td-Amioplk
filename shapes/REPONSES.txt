
Exercice 1 : 

	1. Cela fonctionne car la m√©thode main est dans la m√™me classe que Point 
		et a donc acc√®s aux attributs priv√©s x et y de l'instance p de Point
		
	2. La classe TestPoint n'√©tant pas la classe Point (√©videmment) ou m√™me une classe interne ou m√™me une classe qui h√©rite de Point ou m√™me dans le m√™me package,
		 elle n'a donc pas acc√®s aux attributs priv√©s de Point.
		 On peut y rem√©dier avec un getter (ou accesseur en fran√ßais).
		 
	3. A priori s'il n'y a pas de bonne raison pour rendre des champs visibles, il faut les mettre en priv√©.
	 	Cela permet de s'assurer que l'on contr√¥le les champs et qu'on restreind d'√©ventuelles modifications ou des actions qui ne sont pas en accord avec le comportement de notre classe.
	 	
	4. Un accesseur est une m√©thode publique associ√©e a un champs priv√© d'une classe pour y acc√©der sous le contr√¥le du concepteur de cette classe.
		Oui c'est pertinent de cr√©er des accesseurs ici.
		
	5. Notre projet ne compile plus car on fait appel au constructeur par d√©faut qui n'est plus disponible d√®s lors qu'on sp√©cifie un constructeur avec des param√®tres.
	
	6. Nous avons une collision/ un conflit de noms. Il nous faut sp√©cifier le x qui est en argument et le x qui est attribut de l'instance actuelle avec le mot cl√© this.
	
	7. On peut cr√©er un champs statique (commun √† toutes les instances de la classe Point) qui serait incr√©ment√© √† chaque appel aux diff√©rents constructeurs.
	
	8. Le constructeur sait quel constructeur appeler car les constructeurs ont des param√®tres diff√©rents.
	
Exercice 2 :

	1. Ce code affiche vrai puis faux car p2 fait r√©f√©rence au m√™me objet que p1 alors que p3 fait r√©f√©rence √† un autre objet.
		L'op√©rateur == ne connait pas notre classe Point et donc ne peut pas deviner la signification s√©mentique de notre Point.
		
	3. "index i such that (o==null ? get(i)==null : o.equals(get(i)))" donc il nous faut override la m√©thode equals.
	
Exercice 3 :

	2. Eclipse va lever pendant l'ex√©cution une exception d'indice hors des limites.
	
	5. Eclipse lËve une NullPointerException ‡ l'exÈcution car on essaie d'exÈcuter null.equals(o);
	
	6. Point capacity ne sert plus ‡ rien car on peut ajouter des points indÈfiniement.
	
Exercice 4 : 

	1. On pourrait lui donner deux entiers ou un point existant par exemple.
	
	2. 